export module forms{
    export class choiceVariant{
        choice: string;
        index: number;
        constructor(choice: string, index: number){
            this.choice = choice;
            this.index = index;
        }
    }

    export function MakeChoice(variants: string[], chooseMany: boolean,
        onChoiceFinish: (choices: choiceVariant[])=>void, 
        onChoose?: (choice: choiceVariant, value: boolean)=>void, caption?: string){
        let form = NewForm();
        form.Caption = caption || '';
        let group = form.Properties.NewGroup('');
        group.Align = AlignType.Client;
        group.Scrollable = true;
        for (let i = 0; i < variants.length; i++){
            let check = group.NewBool(variants[i]);
            check.Tag = i;
            check.SetLayout(0, 50 * i, 10, 25);
            check.Align = AlignType.Top;
            check.AlignWithMargins = true;
            check.OnValueChange = ()=>{
                if (check.Value){
                    if (!chooseMany)
                        for (let k = 0; k < group.Count; k++){
                            if (k !== check.Tag)
                                (group.Items[k] as ScriptBooleanProperty).Value = false;
                        }
                }
                if (onChoose){
                    onChoose(new choiceVariant(check.Name, check.Tag), check.Value);
                }
            }
        }
        let result: choiceVariant[] = [];
        form.OKButton = true;
        form.CancelButton = true;
        form.OnOkButtonClick = ()=>{
            for (let i = 0; i < group.Count; i++){
                let bool = group.Items[i] as ScriptBooleanProperty;
                if (bool.Value){
                    result.push(new choiceVariant(bool.Name, bool.Tag));
                }
            };
            if (onChoiceFinish)
                onChoiceFinish(result);
        }
        form.ShowModal();
    }
}