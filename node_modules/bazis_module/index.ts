import * as path from 'path';
import * as fs from 'fs';
import * as internal from './internal';

const major = 0;
const minor = 1;
const patch = 0;
/**
 * Текущая версия модуля
 */
export function version(): string{
    return `${major}.${minor}.${patch}`;
}

/**
 * Функция обработки 3д-объекта
 */
export type objectCallback = (obj: Object3) => boolean;

/**
 * Модуль форм
 */
export module forms{    
    /**
     * Выбор из списка строк
     * @param variants список строк для выбора
     * @param chooseMany Выбор нескольких вариантов
     * @param onChoiceFinish Обработчик события окончания выбора
     * @param caption Заголовок окна выбора
     */
    export function Choose(variants: string[], chooseMany: boolean,
        onChoiceFinish: (choice: string[])=>void, caption?: string){

        internal.forms.MakeChoice(variants, chooseMany, (choiceVariants)=>{
                let result: string[] = [];
                for (let i = 0; i < choiceVariants.length; i++){
                    result.push(choiceVariants[i].choice);
                }
                if (onChoiceFinish)
                    onChoiceFinish(result);
            }, undefined, caption);
    }    
    /**
     * Выбор из списка объектов
     * @param variants список объектов для выбора
     * @param chooseMany Выбор нескольких вариантов
     * @param onChoiceFinish Обработчик события окончания выбора
     * @param onChoose Обработчик события выбора.
     * @param caption Заголовок окна выбора
     */
    export function ChooseObjects(variants: Object3[], chooseMany: boolean,
        onChoiceFinish: (choice: Object3[])=>void, 
        onChoose: (choice: Object3, value: boolean)=>void, caption?: string){

        let strVariants: string[] = [];
        for (let i = 0; i < variants.length; i++){
            strVariants.push(variants[i].Name);
        }
        internal.forms.MakeChoice(strVariants, chooseMany, (choiceVariants)=>{
                let result: Object3[] = [];
                for (let i = 0; i < choiceVariants.length; i++){
                    result.push(variants[choiceVariants[i].index]);
                }
                if (onChoiceFinish)
                    onChoiceFinish(result);
            }, (choice, value)=>{
                if (onChoose){
                    onChoose(variants[choice.index], value);
                }
            }, caption);
    }
}

/**
 * Модуль общих функций
 */
export module common{
    /**
     * Возвращает false, если API устарело и имеет строковый тип 
     * (версия Базиса до октября 2017)
     */
    export function isOldApi(): boolean{
        return (typeof system.apiVersion === "string")
    }
    /**
     * Перебор всех объектов в обратном направлении и выполнение функции с ними
     * (позволяет избежать ошибок при удалении объекта)
     * @param obj Исходный объект
     * @param cb Выполняемая функция (если возвращает false, и параметр 
     * callObjFirst равен true то перебор по вложенным 
     * объектам производиться не будет)
     * @param callObjFirst Выполнять функцию сначала с исходным объектом, 
     * а потом с вложенными 
     */
    export function forEachObjectReverse(obj: Object3 | Model3D, cb: objectCallback, 
        callObjFirst?: boolean){
        if (callObjFirst){
            if (!cb(<any>obj))
                return;
        }
        if (obj.List){
            let list = obj.AsList();
            for (let i = list.Count - 1; i >= 0; i--){
                forEachObjectReverse(list.Objects[i], cb, callObjFirst);
            }
        }
        if (!callObjFirst){
            cb(<any>obj)
        }
    }

    /**
     * Перебор всех объектов и выполнение функции с ними
     * @param obj Исходный объект
     * @param cb Выполняемая функция (если возвращает false, и параметр 
     * callObjFirst равен true то перебор по вложенным 
     * объектам производиться не будет)
     * @param callObjFirst Выполнять функцию сначала с исходным объектом, 
     * а потом с вложенными 
     */
    export function forEachObject(obj: Object3 | Model3D, cb: objectCallback, 
        callObjFirst?: boolean){
        if (callObjFirst){
            if (!cb(obj as Object3))
                return;
        }
        if (obj.List){
            let list = obj.AsList();
            for (let i = 0; i < list.Count; i++){
                forEachObjectReverse(list.Objects[i], cb, callObjFirst);
            }
        }
        if (!callObjFirst){
            cb(obj as Object3)
        }
    }
}

/**
 * Модуль сохранения
 */
export module saving{    
    /**
     * Сохранить объект в файл
     * @param obj Сохраняемый объект
     * @param filename Имя файла
     */
    export function SaveObject(obj: Object3, filename: string){
        SaveObjects([obj], filename);
    }    
    
    export function SaveObjects(objs: Object3[], filename: string){
        Undo.BeginOper(''); //создаем отменяемый блок операций
        try{
            common.forEachObjectReverse(Model, (objec: Object3)=>{            
                if (!objec || objec === <any>Model)
                    return true;
                let result = false;
                for (let i = 0; i < objs.length; i++){
                    let obj = objs[i];
                    if ((<any>obj).IsOwner(objec)){
                        result = true; // objec is owner of obj, so we should go deeper
                    }
                    if (objec == obj || (<any>objec).IsOwner(obj)){
                        return false; //return false and don't check inside;
                    }
                }
                if (!result)
                    DeleteObject(objec); 
                return result;
            }, true);
            Action.SaveModel(filename); //сохраняем то, что получилось
        }
        finally{
            Undo.EndAndUndoOper(); //завершаем блок операций и отменяем его (возвращаемся к начальному состоянию)
        }
    }
    
    export function SaveObjectByName(objectName: string, filename: string, firstOnly: boolean){
    
        function getFilename(filename: string, num: number): string{        
            let parsedPath = path.parse(filename);
            return parsedPath.root + parsedPath.dir + parsedPath.name + num + parsedPath.ext;
        }
    
        let found = false;
        let num = 1;
        Model.forEach((obj)=>{
            if (!found && (obj.Name === objectName)){
                SaveObjects([obj], firstOnly? filename: getFilename(filename, num));
                if (firstOnly){
                    found = true;
                }
            }
        })    
    }
}

/**
 * модуль работы с файлами
 */
export module files{    
    /**
     * Перебор всех файлов с расшрением, соответствующим списку, в каталоге и 
     * вызов пользовательской функции
     * @param dir Начальный каталог
     * @param extensions Массив поддерживаемых расширений
     * @param recursive Рекурсивный поиск (в подпапках)
     * @param cb Выполняемая функция для файла
     */
    export function forEachFile(dir: string, extensions: string[], recursive: boolean,
        cb: (file: string) => void, async?: boolean){
        for (let i = 0; i < extensions.length; i++){
            extensions[i] = extensions[i].toLowerCase();
        }
        let fileStat = fs.lstatSync(dir);
        if (fileStat.isDirectory()){
            let names = fs.readdirSync(dir);
            for (let i = 0; i < names.length; i++){
                let fName = dir + names[i];
                fileStat = fs.lstatSync(fName);
                if (fileStat.isDirectory() && recursive){                    
                    if (async){
                        Action.AsyncExec(()=>{
                            forEachFile(fName + '\\', extensions, recursive, cb, async);
                        })
                    }
                    else 
                        forEachFile(fName + '\\', extensions, recursive, cb, async);
                }
                else if (fileStat.isFile()){
                    let ext = path.extname(fName).toLowerCase();
                    if (extensions.indexOf(ext) >= 0){
                        cb(fName);
                    }
                }
            }
        }
    }
}
